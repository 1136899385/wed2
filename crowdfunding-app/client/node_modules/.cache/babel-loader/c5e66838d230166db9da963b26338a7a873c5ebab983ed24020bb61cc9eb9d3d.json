{"ast":null,"code":"var _jsxFileName = \"C:\\\\Windows\\\\System32\\\\crowdfunding-app\\\\client\\\\src\\\\components\\\\FundraiserDetail.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { useParams } from 'react-router-dom';\nimport './FundraiserDetail.css';\n\n// Defining the component for displaying details of a specific fundraiser\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction FundraiserDetail() {\n  _s();\n  // State to hold the fundraiser data fetched from the API\n  const [fundraiser, setFundraiser] = useState(null);\n  // Extracting the ID parameter from the URL using react-router-dom's useParams hook\n  const {\n    id\n  } = useParams();\n\n  // Using useEffect to fetch the fundraiser data when the component mounts or the 'id' changes\n  useEffect(() => {\n    axios.get(`/api/fundraisers/${id}`) // Making an HTTP GET request to the API endpoint\n    .then(response => {\n      setFundraiser(response.data); // Setting the state with the fetched data\n    }).catch(error => {\n      console.error('Error fetching fundraiser:', error); // Logging any errors that occur during the fetch\n    });\n  }, [id]); // The dependency array includes only 'id', ensuring the effect runs only when it changes\n\n  // If the fundraiser data is not yet available, display a loading message\n  if (!fundraiser) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Once the data is available, render the component with the fundraiser details\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: fundraiser.CAPTION\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), \" // Displaying the title or description of the fundraiser\", /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Organizer: \", fundraiser.ORGANIZER]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), \" // Showing who organized the fundraiser\", /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Target Funding: \", fundraiser.TARGET_FUNDING]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), \" // The funding goal of the campaign\", /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Current Funding: \", fundraiser.CURRENT_FUNDING]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), \" // The amount currently raised\", /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"City: \", fundraiser.CITY]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), \" // The city where the fundraiser is taking place\", /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"ID: \", fundraiser.CATEGORY_ID]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), \" // The category ID of the fundraiser\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n}\n\n// Exporting the component so it can be used in other parts of the application\n_s(FundraiserDetail, \"vLTeo6b9em1ecRMSIHJ3AXEx/PA=\", false, function () {\n  return [useParams];\n});\n_c = FundraiserDetail;\nexport default FundraiserDetail;\nvar _c;\n$RefreshReg$(_c, \"FundraiserDetail\");","map":{"version":3,"names":["React","useEffect","useState","axios","useParams","jsxDEV","_jsxDEV","FundraiserDetail","_s","fundraiser","setFundraiser","id","get","then","response","data","catch","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","CAPTION","ORGANIZER","TARGET_FUNDING","CURRENT_FUNDING","CITY","CATEGORY_ID","_c","$RefreshReg$"],"sources":["C:/Windows/System32/crowdfunding-app/client/src/components/FundraiserDetail.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport { useParams } from 'react-router-dom';\r\nimport './FundraiserDetail.css';\r\n\r\n// Defining the component for displaying details of a specific fundraiser\r\nfunction FundraiserDetail() {\r\n  // State to hold the fundraiser data fetched from the API\r\n  const [fundraiser, setFundraiser] = useState(null);\r\n  // Extracting the ID parameter from the URL using react-router-dom's useParams hook\r\n  const { id } = useParams();\r\n\r\n  // Using useEffect to fetch the fundraiser data when the component mounts or the 'id' changes\r\n  useEffect(() => {\r\n    axios.get(`/api/fundraisers/${id}`) // Making an HTTP GET request to the API endpoint\r\n      .then(response => {\r\n        setFundraiser(response.data); // Setting the state with the fetched data\r\n      })\r\n      .catch(error => {\r\n        console.error('Error fetching fundraiser:', error); // Logging any errors that occur during the fetch\r\n      });\r\n  }, [id]); // The dependency array includes only 'id', ensuring the effect runs only when it changes\r\n\r\n  // If the fundraiser data is not yet available, display a loading message\r\n  if (!fundraiser) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  // Once the data is available, render the component with the fundraiser details\r\n  return (\r\n    <div>\r\n      <h2>{fundraiser.CAPTION}</h2> // Displaying the title or description of the fundraiser\r\n      <p>Organizer: {fundraiser.ORGANIZER}</p> // Showing who organized the fundraiser\r\n      <p>Target Funding: {fundraiser.TARGET_FUNDING}</p> // The funding goal of the campaign\r\n      <p>Current Funding: {fundraiser.CURRENT_FUNDING}</p> // The amount currently raised\r\n      <p>City: {fundraiser.CITY}</p> // The city where the fundraiser is taking place\r\n      <p>ID: {fundraiser.CATEGORY_ID}</p> // The category ID of the fundraiser\r\n    </div>\r\n  );\r\n}\r\n\r\n// Exporting the component so it can be used in other parts of the application\r\nexport default FundraiserDetail;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,OAAO,wBAAwB;;AAE/B;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,SAASC,gBAAgBA,CAAA,EAAG;EAAAC,EAAA;EAC1B;EACA,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAClD;EACA,MAAM;IAAES;EAAG,CAAC,GAAGP,SAAS,CAAC,CAAC;;EAE1B;EACAH,SAAS,CAAC,MAAM;IACdE,KAAK,CAACS,GAAG,CAAC,oBAAoBD,EAAE,EAAE,CAAC,CAAC;IAAA,CACjCE,IAAI,CAACC,QAAQ,IAAI;MAChBJ,aAAa,CAACI,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC;IAChC,CAAC,CAAC,CACDC,KAAK,CAACC,KAAK,IAAI;MACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC,CAAC,CAAC;IACtD,CAAC,CAAC;EACN,CAAC,EAAE,CAACN,EAAE,CAAC,CAAC,CAAC,CAAC;;EAEV;EACA,IAAI,CAACF,UAAU,EAAE;IACf,oBAAOH,OAAA;MAAAa,QAAA,EAAK;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAC9B;;EAEA;EACA,oBACEjB,OAAA;IAAAa,QAAA,gBACEb,OAAA;MAAAa,QAAA,EAAKV,UAAU,CAACe;IAAO;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,6DAC7B,eAAAjB,OAAA;MAAAa,QAAA,GAAG,aAAW,EAACV,UAAU,CAACgB,SAAS;IAAA;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,4CACxC,eAAAjB,OAAA;MAAAa,QAAA,GAAG,kBAAgB,EAACV,UAAU,CAACiB,cAAc;IAAA;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,wCAClD,eAAAjB,OAAA;MAAAa,QAAA,GAAG,mBAAiB,EAACV,UAAU,CAACkB,eAAe;IAAA;MAAAP,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,mCACpD,eAAAjB,OAAA;MAAAa,QAAA,GAAG,QAAM,EAACV,UAAU,CAACmB,IAAI;IAAA;MAAAR,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,qDAC9B,eAAAjB,OAAA;MAAAa,QAAA,GAAG,MAAI,EAACV,UAAU,CAACoB,WAAW;IAAA;MAAAT,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,yCACrC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;AAEV;;AAEA;AAAAf,EAAA,CAnCSD,gBAAgB;EAAA,QAIRH,SAAS;AAAA;AAAA0B,EAAA,GAJjBvB,gBAAgB;AAoCzB,eAAeA,gBAAgB;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}